<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Born729]]></title>
  <link href="http://born729.github.com/atom.xml" rel="self"/>
  <link href="http://born729.github.com/"/>
  <updated>2012-12-23T22:40:43+08:00</updated>
  <id>http://born729.github.com/</id>
  <author>
    <name><![CDATA[born729]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sublime Text 2]]></title>
    <link href="http://born729.github.com/blog/2012/12/16/sublime/"/>
    <updated>2012-12-16T00:00:00+08:00</updated>
    <id>http://born729.github.com/blog/2012/12/16/sublime</id>
    <content type="html"><![CDATA[<p>Sublime Text 2，OSX下最好的程序员编辑器：</p>

<h3>支持coffeescript</h3>

<p>Sublime Text 2支持Textmate bundle，所以很简单了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/Library/Application Support/Sublime Text 2/Packages
</span><span class='line'>git clone git://github.com/jashkenas/coffee-script-tmbundle CoffeeScript</span></code></pre></td></tr></table></div></figure>


<p>重启Sublime就好了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meteor]]></title>
    <link href="http://born729.github.com/blog/2012/12/01/meteor/"/>
    <updated>2012-12-01T00:00:00+08:00</updated>
    <id>http://born729.github.com/blog/2012/12/01/meteor</id>
    <content type="html"><![CDATA[<p>Meteor，很新的一个Web开发框架，代表了下一代的Web开发框架的方向。</p>

<h3>架构</h3>

<h3>DOM处理</h3>

<p>Meteor下，DOM是靠JS render出来的，因此DOM始终是处于动态变化过程中的，这给很多DOM处理带来的额外的复杂性，比如需要初始化一些JS控件，就不能只在Meteor.startup中做，而应该在Meteor的template render后来做，比如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Template.header.rendered = -&gt;
</span><span class='line'>  $('[data-role="dropdown"]').each -&gt;
</span><span class='line'>    $(this).Dropdown()</span></code></pre></td></tr></table></div></figure>


<p>这样的话可以解决DOM的问题，但是紧接的问题就是如何防止因为多次回调导致一些事件被重复bind，jquery的事件是串接bind的，可以这样解决：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>selector.unbind("click");
</span><span class='line'>selector.on("click",...);</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python XML]]></title>
    <link href="http://born729.github.com/blog/2012/10/09/python-xml/"/>
    <updated>2012-10-09T00:00:00+08:00</updated>
    <id>http://born729.github.com/blog/2012/10/09/python-xml</id>
    <content type="html"><![CDATA[<p>Python的html/xml解析工具有很多</p>

<ul>
<li>ElementTree</li>
<li>BeautifulSoup</li>
<li>lxml</li>
</ul>


<h3>ElementTree</h3>

<p>ElementTree是Python内置的XML解析工具因此无需第三方库</p>

<ul>
<li>简单的xpath支持</li>
</ul>


<h3>BeautifulSoup</h3>

<p>BeautifulSoup对html有很好的兼容性，不要求严格的xml，这对于网页解析比较方便。</p>

<h3>lxml</h3>

<p>使用C扩展的xml解析库，性能最佳。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bash on osx]]></title>
    <link href="http://born729.github.com/blog/2012/07/22/bash-on-osx/"/>
    <updated>2012-07-22T00:00:00+08:00</updated>
    <id>http://born729.github.com/blog/2012/07/22/bash-on-osx</id>
    <content type="html"><![CDATA[<p>bash在运行的时候分两种情况，login shell和非login shell。
login shell会执行下列文件：</p>

<ul>
<li>/etc/profile</li>
<li>~/.bash_profile</li>
<li>~/.bash_login(没有.bash_profile的情况下运行)</li>
<li>~/.profile(没有.bash_login的情况下运行)</li>
</ul>


<p>非login shell则是 ~/.bashrc, osx和Linux不一样的是，每次运行Terminal，都是login shell，所以osx下一个常见问题就是.bashrc的设置不起作用，所以，可以在bash_profile下增加这样一行:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ -r ~/.bashrc ] && source ~/.bashrc</span></code></pre></td></tr></table></div></figure>


<p>这样，.bashrc中的设置就在osx下也可以起作用了。</p>

<p>顺便，如果切换shell的话，可以用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo chsh -s /bin/zsh username</span></code></pre></td></tr></table></div></figure>


<p>临时切换shell，可以用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>exec bash</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa debug]]></title>
    <link href="http://born729.github.com/blog/2012/06/24/cocoa-gdb/"/>
    <updated>2012-06-24T00:00:00+08:00</updated>
    <id>http://born729.github.com/blog/2012/06/24/cocoa-gdb</id>
    <content type="html"><![CDATA[<h3>F-Script 注入</h3>

<p>事先将FScript.framework拷贝到/Library/Frameworks，然后使用gdb</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>attach xxx
</span><span class='line'>p (char)[[NSBundle bundleWithPath:@"/Library/Frameworks/FScript.framework"] load]
</span><span class='line'>p (void)[FScriptMenuItem insertInMainMenu]
</span><span class='line'>continue</span></code></pre></td></tr></table></div></figure>


<h3>F-Script console</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keyWindow := NSApplication sharedApplication keyWindow.</span></code></pre></td></tr></table></div></figure>


<p>然后就可以做很多事情了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails向导]]></title>
    <link href="http://born729.github.com/blog/2012/05/27/rails-bootup/"/>
    <updated>2012-05-27T00:00:00+08:00</updated>
    <id>http://born729.github.com/blog/2012/05/27/rails-bootup</id>
    <content type="html"><![CDATA[<h3>RVM</h3>

<p>ruby的包管理器叫做gem，有些类似Linux的apt-get，leopard下已经预装gem，不过版本号实在不敢恭维:1.0.1，一个让人不太信任的数字，所以第一步就是刷新gem，不过对于系统已经安装的ruby和gem，替换不太好，幸好有rvm这个极好的工具，可以让你在个人的目录下管理ruby和gems。安装的方法就是下面的一条bash命令。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bash &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)</span></code></pre></td></tr></table></div></figure>


<p>上面是安装了rvm到你的个人目录下，要使用rvm，还需要设置bash的初始化文件，同样的，一条命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm" # Load RVM function' &gt;&gt; ~/.bash_profile</span></code></pre></td></tr></table></div></figure>


<p>别忘了重新登录，以生效上面的profile。</p>

<h3>Ruby和Rails</h3>

<p>有了rvm，可以很方便的安装ruby了，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm install 1.9.3
</span><span class='line'>socksify_ruby localhost 8888 `which gem` install rails</span></code></pre></td></tr></table></div></figure>


<p>理论上直接 gem install rails就可以了，不过因为一个你能懂的原因，我发现先装好socksify_ruby这个gem要好很多.</p>

<p>大部分书上介绍rails的第一条命令是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails new project</span></code></pre></td></tr></table></div></figure>


<h3>集成Capistrano</h3>

<p>Capistrano是很好的部署方法，如果需要自己部署的话，建议使用Capistrano，首先要生成Capistrano的配置文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>capify .</span></code></pre></td></tr></table></div></figure>


<p>生产的deploy.rb，我们要做一些配置.</p>

<h3>application.rb</h3>

<p>这个文件中，有一些全局的应用程序设置，很多情况下需要修改的是时区，默认为UTC</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.time_zone = 'Beijing'</span></code></pre></td></tr></table></div></figure>


<h3>database.yml</h3>

<p>配置数据库，大部分情况下，我们喜欢postgresql，所以：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>production:
</span><span class='line'>  adapter: postgresql
</span><span class='line'>  encoding: unicode
</span><span class='line'>  database: name
</span><span class='line'>  pool: 5
</span><span class='line'>  username: user
</span><span class='line'>  password: pass</span></code></pre></td></tr></table></div></figure>


<p>上面是设置的生产环境，开发环境我们有时会直接使用sqlite，sqlite和postgresql的兼容性很好，当然有时也会直接使用postgresql，那么就同时需要修改配置文件中的development段落的相关设置。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[远程执行textmate]]></title>
    <link href="http://born729.github.com/blog/2012/05/22/remote-textmate/"/>
    <updated>2012-05-22T00:00:00+08:00</updated>
    <id>http://born729.github.com/blog/2012/05/22/remote-textmate</id>
    <content type="html"><![CDATA[<p>textmate用起来很方便，在连上ssh时，自然也希望能够使用textmate，方法很多，列举几个：</p>

<h3>sftp客户端</h3>

<p>使用支持sftp的客户端，比如Cyberduck，连上ssh之后，配置文本编辑器为textmate，自然就可以直接编辑了，这种方法的好处简单且比较稳定，但是不适合编辑一个目录。</p>

<h3>sshfs文件系统</h3>

<p>将ssh映射为本地文件系统，可以用<a href="http://code.google.com/p/macfuse/">macfuse</a>，这种方法可能存在一定的稳定性问题，但允许编辑整个目录。</p>

<h3>textmate插件</h3>

<p>比如<a href="http://david.olrik.dk/projects/textmate-remote-sync-bundle/">这个</a>插件，当然只能对textmate有效。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails在VPS的部署]]></title>
    <link href="http://born729.github.com/blog/2012/04/28/rails-host-vps/"/>
    <updated>2012-04-28T00:00:00+08:00</updated>
    <id>http://born729.github.com/blog/2012/04/28/rails-host-vps</id>
    <content type="html"><![CDATA[<p>这是我们在VPS的部署方案。</p>

<h3>需求</h3>

<ul>
<li>VPS安装Ubuntu 11.04</li>
<li>RVM安装ruby和rails</li>
<li>Nginx和Passenger模块</li>
<li>PostgreSQL</li>
</ul>


<h3>VPS</h3>

<ul>
<li>我们使用Ubuntu11.04，设置好ssh</li>
</ul>


<h3>Ruby和Rails</h3>

<p>ruby要用1.9.3以上版本，因为1.9.3版本解决了一个性能问题，Rails用3.1以上版本，因为在之前的版本会有assets方面的兼容性问题。</p>

<h3>Nginx</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install passenger
</span><span class='line'>sudo apt-get install libcurl4-openssl-dev
</span><span class='line'>rvmsudo passenger-install-nginx-module</span></code></pre></td></tr></table></div></figure>


<p>安装nginx启动脚本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://www.smashingmagazine.com/files/nginx
</span><span class='line'>sudo mv nginx /etc/init.d/nginx
</span><span class='line'>sudo chmod +x /etc/init.d/nginx
</span><span class='line'>sudo /usr/sbin/update-rc.d -f nginx defaults</span></code></pre></td></tr></table></div></figure>


<h3>PostgreSQL</h3>

<p>我们偏爱PostgreSQL，除了PostgreSQL成熟以外，还因为PostgreSQL和Sqlite比较接近的SQL语句，这样可以在两者间随意切换。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install postgresql libpq-dev</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress]]></title>
    <link href="http://born729.github.com/blog/2012/04/10/octopress/"/>
    <updated>2012-04-10T13:01:00+08:00</updated>
    <id>http://born729.github.com/blog/2012/04/10/octopress</id>
    <content type="html"><![CDATA[<p><a href="http://octopress.org">Octopress</a>是非常方便的静态博客程序，尤其适合github。</p>

<h3>安装</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress
</span><span class='line'>bundle install
</span><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<p>这就把Octopress装好了，上面的目录名octopress可以任意更改，接下来就需要设置github绑定了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>上面的命令会有提示输入git路径，注意要输入git的全路径，比如git@github.com:xxx/yyy.git</p>

<h3>使用</h3>

<p>新增博客帖子很简单，可以使用命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["title"]</span></code></pre></td></tr></table></div></figure>


<p>当然也可以在source/_posts目录下手动添加博客，要编译生成静态页面，并上传到github</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake preview
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>如果你的ruby gem比较复杂，则需要在命令前使用bundle exec。</p>

<p>如果要上传源文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m "source commit"
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails cheat sheet]]></title>
    <link href="http://born729.github.com/blog/2012/01/07/rails-on-osx/"/>
    <updated>2012-01-07T00:00:00+08:00</updated>
    <id>http://born729.github.com/blog/2012/01/07/rails-on-osx</id>
    <content type="html"><![CDATA[<h4>执行sql update语句</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ActiveRecord::Base.connection.execute("update ...")</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git笔记]]></title>
    <link href="http://born729.github.com/blog/2012/01/05/git-notes/"/>
    <updated>2012-01-05T00:00:00+08:00</updated>
    <id>http://born729.github.com/blog/2012/01/05/git-notes</id>
    <content type="html"><![CDATA[<p>一图胜千言</p>

<p><img src="http://osteele.com/images/2008/git-transport.png" alt="" /></p>

<h4>获取</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git@github.com:liuzhongshu/liuzhongshu.github.com.git</span></code></pre></td></tr></table></div></figure>


<h4>本地操作</h4>

<p>添加所有修改，包括删除的文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add . -A</span></code></pre></td></tr></table></div></figure>


<p>查看修改情况</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git status</span></code></pre></td></tr></table></div></figure>


<p>提交到本地</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git commit -m "comment"</span></code></pre></td></tr></table></div></figure>


<p>取消，下面两条都可以，暂存区域会取消，&#8211;hard会将修改的文件恢复到上次commit状态。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset
</span><span class='line'>git reset --hard</span></code></pre></td></tr></table></div></figure>


<h4>远程服务器</h4>

<h3>其它</h3>
]]></content>
  </entry>
  
</feed>
